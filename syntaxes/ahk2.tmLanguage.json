{
  "name": "autohotkey2",
  "scopeName": "source.ahk2",
  "patterns": [
    {
      "include": "#compiler_directive"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#hotkey-hotstring"
    },
    {
      "include": "#switch_statement"
    },
    {
      "match": "(?<!\\.)\\b(?i:break|continue|critical|loop|until|else|for|goto|if|throw|try|catch|finally|return|while)\\b(?!\\s*:)",
      "name": "keyword.control.ahk2"
    },
    {
      "match": "(?<!\\.)\\b(?i:global|local|static)\\b",
      "name": "storage.modifier.ahk2"
    },
    {
      "match": "(?<=(^|[^.])\\b(?i:loop)\\s+)\\b(?i:files|parse|read|reg)\\b",
      "name": "keyword.keys.ahk2"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#funccallnotparens"
    },
    {
      "match": "(?<!\\.)\\b(?i:a_ahkpath|a_ahkversion|a_allowmainwindow|a_appdata|a_appdatacommon|a_args|a_clipboard|a_computername|a_comspec|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_fileencoding|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_initialworkingdir|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_keydelay|a_keydelayplay|a_keyduration|a_keydurationplay|a_language|a_lasterror|a_linefile|a_linenumber|a_listlines|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilename|a_loopfilepath|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_mousedelayplay|a_msec|a_mydocuments|a_now|a_nowutc|a_osversion|a_priorhotkey|a_priorkey|a_priorline|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_sendlevel|a_sendmode|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_storecapslockmode|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_tickcount|a_timeidle|a_timeidlekeyboard|a_timeidlemouse|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_traymenu|a_username|a_wday|a_windelay|a_windir|a_workfilename|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|true|false|u_\\w+)\\b",
      "name": "constant.language.ahk2"
    },
    {
      "include": "#pre-definition"
    },
    {
      "include": "#class_block"
    },
    {
      "include": "#block"
    },
    {
      "include": "#parens"
    },
    {
      "name": "meta.function.ahk2",
      "begin": "(?<=(^\\s*(?i:static\\s+)?))(?=[[:alpha:]_][[:alnum:]_]*\\()",
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#function-innards"
        }
      ]
    },
    {
      "include": "#ahk_function_call"
    },
    {
      "begin": "(%)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.parens.begin.bracket.percent.ahk2"
        }
      },
      "end": "\\1",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.percent.ahk2"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    {
      "name": "meta.bracket.square.access.ahk2",
      "begin": "([_[:alpha:]][_[:alnum:]]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
      "beginCaptures": {
        "1": {
          "name": "variable.object.ahk2"
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square.ahk2"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.end.bracket.square.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    {
      "name": "storage.modifier.array.bracket.square.ahk2",
      "match": "\\[\\s*\\]"
    },
    {
      "name": "variable.other.ahk2",
      "match": "\\b(?<!\\.)[_[:alpha:]][_[:alnum:]]*\\b",
      "patterns": [
        {
          "name": "support.class",
          "match": "\\b(?i:any|array|boundfunc|buffer|class|clipboardall|closure|enumerator|error|file|float|func|gui|indexerror|inputhook|integer|keyerror|map|membererror|memoryerror|menu|menubar|methoderror|number|object|oserror|primitive|propertyerror|regexmatch|string|targeterror|timeouterror|typeerror|valueerror|zerodivisionerror)\\b"
        }
      ]
    },
    {
      "name": "variable.object.ahk2",
      "match": "\\b(?<=\\.)[_[:alpha:]][_[:alnum:]]*\\b"
    },
    {
      "match": ",",
      "name": "punctuation.separator.delimiter.ahk2"
    }
  ],
  "repository": {
    "access-method": {
      "name": "meta.function-call.member.ahk2",
      "begin": "([_[:alpha:]][_[:alnum:]]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[_[:alpha:]][_[:alnum:]]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([_[:alpha:]][_[:alnum:]]*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.object.ahk2"
        },
        "2": {
          "name": "punctuation.separator.dot-access.ahk2"
        },
        "3": {
          "name": "punctuation.separator.pointer-access.ahk2"
        },
        "4": {
          "patterns": [
            {
              "match": "\\.",
              "name": "punctuation.separator.dot-access.ahk2"
            },
            {
              "match": "[_[:alpha:]][_[:alnum:]]*",
              "name": "variable.object.ahk2"
            },
            {
              "name": "everything.else.ahk2",
              "match": ".+"
            }
          ]
        },
        "5": {
          "name": "entity.name.function.member.ahk2"
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.ahk2"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "backslash_escapes": {
      "match": "(?i)`[abefnprtv'\"`]",
      "name": "constant.character.escape.ahk2"
    },
    "block": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.ahk2"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#method_access"
        },
        {
          "name": "meta.initialization.ahk2",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|return)\n\t(?<=\\w) \\s+(and|not|or|xor)  # or word + space before name\n  )\n)\n(\n  (?:[_[:alpha:]][[:alnum:]_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other.ahk2"
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.ahk2"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "match": "\\b(?<!\\.)(?i:this|super)\\b",
          "name": "variable.language.this.ahk2"
        },
        {
          "include": "#parens-block"
        },
        {
          "include": "$base"
        }
      ]
    },
    "class_block": {
      "name": "meta.block.class.ahk2",
      "begin": "^\\s*((?i:class))\\s+(\\w+(\\.\\w+)*)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.class.ahk2"
        },
        "2": {
          "name": "entity.name.type.class.ahk2"
        }
      },
      "end": "(?={)",
      "patterns": [
        {
          "match": "\\b((?i:extends))\\s+([\\w.]+)",
          "captures": {
            "1": {
              "name": "storage.type.class.ahk2"
            },
            "2": {
              "name": "entity.name.type.class.ahk2"
            }
          }
        },
        {
          "include": "#comments"
        }
      ]
    },
    "ahk_conditional_context": {
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "ahk_function_call": {
      "begin": "(?!(?i:static)\\s*)(?=(?:[_[:alpha:]][[:alnum:]_]*+)\\()",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function-call.ahk2",
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "case_statement": {
      "name": "meta.conditional.case.ahk2",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)case(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "2": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "3": {
          "name": "comment.block.ahk2"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "5": {
          "name": "keyword.control.case.ahk2"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#ahk_conditional_context"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.ahk2",
          "begin": "^\\s*(\\/\\*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.ahk2"
            }
          },
          "end": "(\\*\\/)\\s*$",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.ahk2"
            }
          }
        },
        {
          "name": "comment.line.ahk2",
          "match": "(^\\s*|\\s+)(;.*)"
        }
      ]
    },
    "compiler_directive": {
      "patterns": [
        {
          "name": "comment.block.ahk2",
          "begin": "^\\s*(\\/\\*)((?i:ahk2exe-keep))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.ahk2"
            },
            "2": {
              "name": "keyword.control.directive.conditional.ahk2"
            }
          },
          "end": "^\\s*(\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.ahk2"
            }
          }
        },
        {
          "match": "^\\s*;@(?i:ahk2exe-ignore(begin|end))",
          "name": "keyword.control.directive.ahk2"
        },
        {
          "begin": "^\\s*(;@(?i:ahk2exe-let))\\s",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.directive.ahk2"
            }
          },
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "match": "\\b([_[:alpha:]][_[:alnum:]]*)\\b",
              "name": "constant.language.ahk2"
            },
            {
              "match": "=",
              "name": "keyword.operator.assignment.ahk2"
            },
            {
              "match": ",",
              "name": "punctuation.separator.delimiter.ahk2"
            }
          ]
        },
        {
          "match": "^\\s*;@(?i:ahk2exe-\\w+)\\b(\\s.*)?",
          "name": "keyword.control.directive.ahk2",
          "captures": {
            "1": {
              "name": "string.raw.ahk2"
            }
          }
        }
      ]
    },
    "default_statement": {
      "name": "meta.conditional.case.ahk2",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)default(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "2": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "3": {
          "name": "comment.block.ahk2"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "5": {
          "name": "keyword.control.default.ahk2"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.default.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#ahk_conditional_context"
        }
      ]
    },
    "evalutation_context": {
      "patterns": [
        {
          "include": "#function-call-innards"
        },
        {
          "include": "$base"
        }
      ]
    },
    "function-call-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?i:while|for|do|if|else|switch|catch|return|and|not|or)\\s*\\()\n(\n(?:[_[:alpha:]][[:alnum:]_]*))\n(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.ahk2",
              "patterns": [
                {
                  "include": "#function-defaultLibrary"
                }
              ]
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            },
            {
              "match": "(?<=[,(]\\s*)(?i:byref)(?=\\s+\\w+\\s*(,|\\)|:=))(?=.+\\)\\s*=>)",
              "name": "storage.modifier.ahk2"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "match": "(?<=[,(]\\s*)(?i:byref)(?=\\s+\\w+\\s*(,|\\)|:=))(?=.+\\)\\s*=>)",
          "name": "storage.modifier.ahk2"
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "function-defaultLibrary": {
      "patterns": [
        {
          "match": "\\b(?i:blockinput|coordmodetooltip|coordmodepixel|coordmodemouse|coordmodecaret|coordmodemenu|detecthiddentext|detecthiddenwindows|fileencoding|hotif|listlines|pause|runas|sendlevel|sendmode|setcapslockstate|setcontroldelay|setdefaultmousespeed|setkeydelay|setmousedelay|setnumlockstate|setregview|setscrolllockstate|setstorecapslockmode|settitlematchmode|setwindelay|setworkingdir|shutdown|suspend|thread)\\b",
          "name": "support.function.ahk2"
        },
        {
          "match": "\\b(?i:abs|acos|array|asin|atan|bufferalloc|callbackcreate|callbackfree|caretgetpos|ceil|chr|clipboardall|clipwait|comcall|comobjactive|comobjarray|comobjconnect|comobjcreate|comobject|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|controladditem|controlchooseindex|controlchoosestring|controlclick|controldeleteitem|controlfinditem|controlfocus|controlgetchecked|controlgetchoice|controlgetclassnn|controlgetenabled|controlgetexstyle|controlgetfocus|controlgethwnd|controlgetindex|controlgetitems|controlgetpos|controlgetstyle|controlgettext|controlgetvisible|controlhide|controlhidedropdown|controlmove|controlsend|controlsetchecked|controlsetenabled|controlsetexstyle|controlsetstyle|controlsettext|controlshow|controlshowdropdown|cos|dateadd|datediff|dircopy|dircreate|dirdelete|direxist|dirmove|dirselect|dllcall|download|driveeject|drivegetcapacity|drivegetfilesystem|drivegetlabel|drivegetlist|drivegetserial|drivegetspacefree|drivegetstatus|drivegetstatuscd|drivegettype|drivelock|drivesetlabel|driveunlock|editgetcurrentcol|editgetcurrentline|editgetline|editgetlinecount|editgetselectedtext|editpaste|envget|envset|exception|exp|fileappend|filecopy|filecreateshortcut|filedelete|fileexist|filegetattrib|filegetshortcut|filegetsize|filegettime|filegetversion|fileinstall|filemove|fileopen|fileread|filerecycle|filerecycleempty|fileselect|filesetattrib|filesettime|float|floor|format|formattime|func|getkeyname|getkeysc|getkeystate|getkeyvk|getmethod|groupactivate|groupadd|groupclose|groupdeactivate|guictrlfromhwnd|guifromhwnd|hasbase|hasmethod|hasprop|hotkey|imagesearch|inidelete|iniread|iniwrite|inputbox|inputhook|instr|integer|isalnum|isalpha|isbyref|isdate|isdigit|isfloat|isfunc|isinteger|islabel|islower|isnumber|isobject|isset|issomething|isspace|istime|isupper|isxdigit|keywait|listviewgetcontent|ln|loadpicture|log|map|max|menufromhandle|menuselect|min|mod|monitorget|monitorgetcount|monitorgetname|monitorgetprimary|monitorgetworkarea|mouseclick|mouseclickdrag|mousegetpos|mousemove|msgbox|numget|numput|objaddref|objbindmethod|object|objfromptr|objfromptraddref|objgetbase|objgetcapacity|objhasownprop|objownpropcount|objownprops|objptr|objptraddref|objrelease|objsetbase|objsetcapacity|onclipboardchange|onerror|onexit|onmessage|ord|outputdebug|pixelgetcolor|pixelsearch|postmessage|processclose|processexist|processsetpriority|processwait|processwaitclose|random|regdelete|regdeletekey|regexmatch|regexreplace|regread|regwrite|round|run|runwait|send|sendevent|sendinput|sendmessage|sendplay|sendraw|sendtext|settimer|sin|sleep|sort|soundbeep|soundgetinterface|soundgetmute|soundgetname|soundgetvolume|soundplay|soundsetmute|soundsetvolume|splitpath|sqrt|statusbargettext|statusbarwait|strcompare|strget|string|strlen|strptr|strput|strreplace|strsplit|substr|sysget|sysgetipaddresses|tan|tooltip|trayseticon|traytip|trim|type|varsetstrcapacity|winactivate|winactivatebottom|winactive|winclose|winexist|wingetclass|wingetclientpos|wingetcontrols|wingetcontrolshwnd|wingetcount|wingetid|wingetidlast|wingetlist|wingetminmax|wingetpid|wingetpos|wingetprocessname|wingetprocesspath|wingettext|wingettitle|wingettranscolor|wingettransparent|wingetexstyle|wingetstyle|winsetexstyle|winsetstyle|winhide|winkill|winmaximize|winminimize|winmove|winmovebottom|winmovetop|winredraw|winrestore|winsetalwaysontop|winsetenabled|winsetregion|winsettitle|winsettranscolor|winsettransparent|winshow|winwait|winwaitactive|winwaitclose|winwaitnotactive)\\b",
          "name": "support.function.ahk2"
        }
      ]
    },
    "function-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "begin": "([_[:alpha:]][[:alnum:]_]*)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.ahk2",
              "patterns": [
                {
                  "include": "#function-defaultLibrary"
                }
              ]
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.ahk2"
            }
          },
          "patterns": [
            {
              "match": "(?<=[,(]\\s*)(?i:byref)(?=\\s+\\w+\\s*(,|\\)|:=))",
              "name": "storage.modifier.ahk2"
            },
            {
              "match": "(?<=:=\\s*)(?i:unset)(?=\\s*[,)])",
              "name": "constant.language.undefined.ahk2"
            },
            {
              "include": "#probably_a_parameter"
            },
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "include": "$base"
        }
      ]
    },
    "funccallnotparens": {
      "patterns": [
        {
          "match": "(?<=^\\s*(\\{\\s*)?|::\\s*|(?i:(try|else|finally)\\s+))([[:alpha:]_][[:alnum:]_]*\\b(?<!^\\s*(?i:class)\\b))(?=$|\\s((?!(\\s*[+\\-*/^&:.|]?=|<<=|>>=|\\?|\\{))|$))",
          "name": "entity.name.function.ahk2",
          "captures": {
            "0": {
              "patterns": [
                {
                  "include": "#function-defaultLibrary"
                }
              ]
            }
          }
        },
        {
          "match": "(?<=(^\\s*(\\{\\s*)?|::\\s*|(?i:(try|else|finally)\\s+))([[:alpha:]_][[:alnum:]_]*\\.)+)([[:alpha:]_][[:alnum:]_]*\\b)(?=$|\\s((?!(\\s*[+\\-*/^&:.|]?=|<<=|>>=|\\?|\\{))|$))",
          "name": "entity.name.function.member.ahk2"
        }
      ]
    },
    "keylist": {
      "match": "(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheelleft|wheelright|xbutton1|xbutton2|joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpadhome|numpadend|numpadpgdn|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+))",
      "name": "keyword.keys.ahk2"
    },
    "hotkey-hotstring": {
      "patterns": [
        {
          "match": "^\\s*(:(?i:\\s|\\*|\\?|c[01]?|[pk]\\d+|s[ipe]|[brto]0?|x|z)*:(?<!^\\s*:[^xX]*:)[\\x09\\x20-\\x7E]+?)(::)",
          "captures": {
            "1": {
              "name": "entity.name.function.hotstring.ahk2"
            },
            "3": {
              "name": "punctuation.definition.equals.colon"
            }
          }
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.function.hotstring.ahk2"
            },
            "3": {
              "name": "punctuation.definition.equals.colon"
            },
            "4": {
              "name": "string.raw.ahk2"
            },
            "5": {
              "name": "comment.inline.ahk2"
            }
          },
          "match": "^\\s*(:(?i:\\s|\\*|\\?|c[01]?|[pk]\\d+|s[ipe]|[brto]0?|x|z)*:[\\x09\\x20-\\x7E]+?)(::)\\s*((?:\\{\\s*)|(.*?))(\\s;.*)?$",
          "name": "hotstringline.ahk2"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.function.hotkey.ahk2",
              "patterns": [
                {
                  "match": "(?:\\s)&(?=\\s+\\S+(?i:\\s+up)?$)",
                  "name": "keyword.operator.ahk2"
                },
                {
                  "match": "(?<=(\\W|^))[*~]{0,2}([<>]?[\\^!+#]){0,4}(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheelleft|wheelright|xbutton1|xbutton2|joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpadhome|numpadend|numpadpgdn|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+|`;|[\\x21-\\x3A\\x3C-\\x7E])(?=(\\s|$))",
                  "name": "keyword.keys.ahk2"
                }
              ]
            },
            "8": {
              "name": "punctuation.definition.equals.colon"
            },
            "9": {
              "name": "keyword.keys.ahk2"
            }
          },
          "match": "^\\s*(?i:\\$?[~*]{0,2}((([<>]?[!+#^]){0,4}(`;|[\\x21-\\x3A\\x3C-\\x7E]|[a-z][a-z\\d_]+))|(`;|[\\x21-\\x3A\\x3C-\\x7E]|[a-z][a-z\\d_]+)\\s+&\\s+(`;|[\\x21-\\x3A\\x3C-\\x7E]|[a-z][a-z\\d_]+))(\\s+up)?)(::)(\\s*([<>]?[!+#^]){0,4}(`{|[\\x21-\\x7A\\x7C-\\x7E]|(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheelleft|wheelright|xbutton1|xbutton2|joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpadhome|numpadend|numpadpgdn|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+))(?=(\\s+(;.*)?)?$))?",
          "name": "hotkeyline.ahk2"
        },
        {
          "match": "^\\s*\\w+(:)(?=\\s*(\\s;.*)?$)",
          "name": "entity.name.label.ahk2",
          "captures": {
            "1": {
              "name": "punctuation.definition.equals.colon"
            }
          }
        }
      ]
    },
    "method_access": {
      "contentName": "meta.function-call.member.ahk2",
      "begin": "((?:[_[:alpha:]]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.)))((?:[_[:alpha:]]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([_[:alpha:]]\\w*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object.access.ahk2"
        },
        "2": {
          "name": "punctuation.separator.dot-access.ahk2"
        },
        "3": {
          "patterns": [
            {
              "include": "#method_access"
            },
            {
              "match": "((?:[_[:alpha:]]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.)))",
              "captures": {
                "1": {
                  "name": "variable.other.object.access.ahk2"
                },
                "2": {
                  "name": "punctuation.separator.dot-access.ahk2"
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.function.member.ahk2"
        },
        "5": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.ahk2"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "numbers": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eE])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.ahk2"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal.ahk2"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.hexadecimal.ahk2"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.ahk2"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.ahk2"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.hexadecimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.ahk2"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.point.ahk2"
                    },
                    "5": {
                      "name": "constant.numeric.decimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.decimal.ahk2"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.decimal.ahk2"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.decimal.ahk2"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.decimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.ahk2"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary.ahk2"
                    },
                    "2": {
                      "name": "constant.numeric.binary.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.ahk2"
                    }
                  }
                },
                {
                  "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal.ahk2"
                    },
                    "2": {
                      "name": "constant.numeric.octal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.ahk2"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.ahk2"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.hexadecimal.ahk2"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.ahk2"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.ahk2"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.hexadecimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.ahk2"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.decimal.ahk2"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.decimal.ahk2"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.decimal.ahk2"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.decimal.ahk2",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.ahk2"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eE])[+-])+",
                  "name": "invalid.illegal.constant.numeric"
                }
              ]
            }
          ]
        }
      }
    },
    "operators": {
      "patterns": [
        {
          "match": "(?<!\\.)\\b(?i:and|or|not|in|is|contains)\\b(?!\\s*:)",
          "name": "keyword.operator.expression.ahk2"
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.ahk2"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.ahk2"
        },
        {
          "match": "\\.=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.ahk2"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.ahk2"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.ahk2"
        },
        {
          "match": "!=|<=|>=|=?=|<|>",
          "name": "keyword.operator.comparison.ahk2"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.ahk2"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.ahk2"
        },
        {
          "match": ":=",
          "name": "keyword.operator.assignment.ahk2"
        },
        {
          "match": "\\*|/|-|\\+",
          "name": "keyword.operator.ahk2"
        },
        {
          "match": "\\.(?=\\w)",
          "name": "keyword.operator.dot.ahk2"
        },
        {
          "begin": "(\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.ahk2"
            }
          },
          "end": "(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "parens": {
      "name": "meta.parens.ahk2",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.ahk2"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.ahk2"
        }
      },
      "patterns": [
        {
          "include": "$base"
        },
        {
          "match": "(?<=[,(]\\s*)(?i:byref)(?=\\s+\\w+\\s*(,|\\)|:=))(?=.+\\)\\s*=>)",
          "name": "storage.modifier.ahk2"
        }
      ]
    },
    "pre-definition": {
      "patterns": [
        {
          "begin": "^\\s*((#)(?i:include(?i:again)?))\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          },
          "end": "(?=(?:;))|(?=\\n)",
          "name": "meta.preprocessor.include.ahk2",
          "patterns": [
            {
              "begin": "['\"]",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.ahk2"
                }
              },
              "end": "\\0",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.ahk2"
                }
              },
              "name": "string.quoted.include.ahk2"
            },
            {
              "begin": "<",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.ahk2"
                }
              },
              "end": ">",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.ahk2"
                }
              },
              "name": "string.quoted.other.lt-gt.include.ahk2"
            },
            {
              "begin": "[^\\s;]",
              "end": "(?=(?:\\s+;))|(?=\\n)",
              "name": "string.raw.include.ahk2"
            },
            {
              "match": "(?:\\s+);.*",
              "name": "comment.line.ahk2"
            }
          ]
        },
        {
          "begin": "^\\s*((#)(?i:dllload|requires|errorstdout))\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          },
          "end": "(?=(?:;))|(?=\\n)",
          "name": "meta.preprocessor.ahk2",
          "patterns": [
            {
              "begin": "[^\\s;]",
              "end": "(?=(?:\\s+;))|(?=\\n)",
              "name": "string.quoted.ahk2"
            },
            {
              "match": "(?:\\s+);.*",
              "name": "comment.line.ahk2"
            }
          ]
        },
        {
          "begin": "^\\s*((#)(?i:hotstring))\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          },
          "end": "(?=(?:;))|(?=\\n)",
          "name": "meta.preprocessor.ahk2",
          "patterns": [
            {
              "begin": "[^\\s;]",
              "end": "(?=(?:\\s+;))|(?=\\n)",
              "name": "string.quoted.ahk2"
            }
          ]
        },
        {
          "match": "^\\s*((#)(?i:clipboardtimeout|hotif|hotiftimeout|hotkeyinterval|hotkeymodifiertimeout|inputlevel|installkeybdhook|installmousehook|keyhistory|maxhotkeysperinterval|maxthreads|maxthreadsbuffer|maxthreadsperhotkey|menumaskkey|notrayicon|persistent|singleinstance|suspendexempt|usehook|warn|winactivateforce))\\b",
          "captures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          }
        }
      ]
    },
    "probably_a_parameter": {
      "match": "(?<=(\\(|,|(?i:byref)\\s)\\s*)([_[:alpha:]][_[:alnum:]]*\\*?)\\s*(?=(,|\\)|:=))",
      "captures": {
        "2": {
          "name": "variable.parameter.probably.ahk2"
        }
      }
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?i)`[abefnprtv'\"`]",
          "name": "constant.character.escape.ahk2"
        },
        {
          "match": "`.",
          "name": "invalid.illegal.unknown-escape.ahk2"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "(['\"])(?=.*\\1)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.ahk2"
            }
          },
          "end": "(\\1)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ahk2"
            }
          },
          "name": "string.quoted.ahk2",
          "patterns": [
            {
              "include": "#string_escaped_char"
            }
          ]
        },
        {
          "begin": "(['\"])(?!.*\\1)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.ahk2"
            }
          },
          "end": "^\\s*\\)(\\1)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ahk2"
            }
          },
          "name": "string.quoted.brack",
          "patterns": [
            {
              "include": "#string_escaped_char"
            }
          ]
        }
      ]
    },
    "switch_conditional_parentheses": {
      "name": "meta.conditional.switch.ahk2",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "2": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "3": {
          "name": "comment.block.ahk2"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "5": {
          "name": "punctuation.section.parens.begin.bracket.round.conditional.switch.ahk2"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end.bracket.round.conditional.switch.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#ahk_conditional_context"
        }
      ]
    },
    "switch_statement": {
      "name": "meta.block.switch.ahk2",
      "begin": "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)switch(?!\\w)))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.switch.ahk2"
        },
        "2": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "3": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "4": {
          "name": "comment.block.ahk2"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "6": {
          "name": "keyword.control.switch.ahk2"
        }
      },
      "end": "(?:(?<=\\})|(?=[>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.switch.ahk2",
          "begin": "\\G ?",
          "end": "((?:\\{))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.switch.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#switch_conditional_parentheses"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.body.switch.ahk2",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.switch.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#default_statement"
            },
            {
              "include": "#case_statement"
            },
            {
              "include": "$self"
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "name": "meta.tail.switch.ahk2",
          "begin": "(?<=\\})[\\s\\n]*",
          "end": "[\\s\\n]*",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    }
  }
}