{
  "name": "autohotkey2",
  "scopeName": "source.ahk2",
  "patterns": [
    {
      "include": "#compiler_directive"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#hotkey_hotstring"
    },
    {
      "include": "#switch_statement"
    },
    {
      "include": "#object_property"
    },
    {
      "match": "(?<!\\.)((?i:break|continue|goto))\\s+([^;]\\S*)",
      "captures": {
        "1": {
          "name": "keyword.control.ahk2"
        },
        "2": {
          "name": "entity.name.label.ahk2"
        }
      }
    },
    {
      "match": "(?<!\\.)((?i:catch))(\\s+(\\w+)?(\\s+((?i:as))\\s+(\\w+))?)?",
      "captures": {
        "1": {
          "name": "keyword.control.ahk2"
        },
        "3": {
          "patterns": [
            {
              "match": "\\b(?i:as)\\b",
              "name": "keyword.control.ahk2"
            },
            {
              "include": "#default_classes"
            }
          ],
          "name": "entity.name.type.class.ahk2"
        },
        "5": {
          "name": "keyword.control.ahk2"
        },
        "6": {
          "name": "variable.other.ahk2"
        }
      }
    },
    {
      "match": "(?<!\\.)\\b(?i:break|continue|critical|until|else|for|goto|if|throw|try|finally|return|while)\\b(?!\\s*:)",
      "name": "keyword.control.ahk2"
    },
    {
      "match": "(?<!\\.)\\b(?i:loop)(\\s+(?i:files|parse|read|reg))?\\b",
      "name": "keyword.control.ahk2"
    },
    {
      "match": "(?<!\\.)\\b(?i:global|local|static)\\b",
      "name": "storage.modifier.ahk2"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#pre_definition"
    },
    {
      "include": "#class_block"
    },
    {
      "include": "#default_classes"
    },
    {
      "include": "#function_defaultLibrary"
    },
    {
      "include": "#function_call_notparens"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#block"
    },
    {
      "include": "#continuation_section"
    },
    {
      "include": "#parens"
    },
    {
      "include": "#function_call"
    },
    {
      "name": "variable.other.property.ahk2",
      "match": "\\b(?<=\\.)[_[:alnum:]]+\\b"
    },
    {
      "match": ",",
      "name": "punctuation.separator.comma.ahk2"
    }
  ],
  "repository": {
    "block": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.ahk2"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#object_property"
        },
        {
          "name": "meta.initialization.ahk2",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|return)\n\t(?<=\\w) \\s+(and|not|or|xor)  # or word + space before name\n  )\n)\n(\n  (?:[_[:alpha:]][[:alnum:]_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other.ahk2"
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization.ahk2"
            }
          },
          "patterns": [
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.ahk2"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "include": "#parens-block"
        },
        {
          "include": "$base"
        }
      ]
    },
    "case_statement": {
      "name": "meta.conditional.case.ahk2",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)case(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "2": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "3": {
          "name": "comment.block.ahk2"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "5": {
          "name": "keyword.control.case.ahk2"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#conditional_context"
        }
      ]
    },
    "class_block": {
      "name": "meta.block.class.ahk2",
      "begin": "^\\s*((?i:class))\\s+(\\w+(\\.\\w+)*)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.class.ahk2"
        },
        "2": {
          "name": "entity.name.type.class.ahk2"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.class.end.ahk2"
        }
      },
      "patterns": [
        {
          "begin": "\\G",
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "match": "\\b((?i:extends))(\\s+([\\w.]+))?",
              "captures": {
                "1": {
                  "name": "storage.modifier.ahk2"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\.(?=\\w)",
                      "name": "punctuation.accessor.ahk2"
                    },
                    {
                      "include": "#default_classes"
                    },
                    {
                      "match": "\\b[^.]+\\b",
                      "name": "entity.name.type.class.ahk2"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.class.begin.ahk2"
            }
          },
          "end": "(?=})",
          "name": "meta.block.class.body.ahk2",
          "patterns": [
            {
              "match": "^\\s*(?i:static)(?=\\s+\\w+)",
              "name": "storage.modifier.ahk2"
            },
            {
              "match": "(?<=(^\\s*(?i:static\\s+)?|,\\s*))\\w+(?=\\s*(:=|=>))",
              "name": "variable.other.property.ahk2"
            },
            {
              "begin": "(?<=^\\s*(?i:static\\s+)?)(\\w+)(?=\\()",
              "beginCaptures": {
                "1": {
                  "patterns": [
                    {
                      "match": "\\b(__(?i:new|get|call|set|delete))\\b",
                      "captures": {
                        "1": {
                          "name": "storage.type.metafunction.ahk2"
                        }
                      }
                    }
                  ],
                  "name": "entity.name.function.method.ahk2"
                }
              },
              "end": "(?<=^\\s*)(})|\\n",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.block.method.end.ahk2"
                }
              },
              "name": "meta.block.method.ahk2",
              "patterns": [
                {
                  "begin": "\\G\\(",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.parameters.begin.ahk2"
                    }
                  },
                  "end": "\\)",
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.definition.parameters.end.ahk2"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#paramters"
                    }
                  ]
                },
                {
                  "begin": "{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.method.begin.ahk2"
                    }
                  },
                  "end": "(?=})",
                  "name": "meta.block.method.body.ahk2",
                  "patterns": [
                    {
                      "include": "#variable_this"
                    },
                    {
                      "include": "$base"
                    }
                  ]
                },
                {
                  "begin": "=>",
                  "beginCaptures": {
                    "0": {
                      "name": "storage.type.function.arrow.ahk2"
                    }
                  },
                  "end": "(?=\\n)",
                  "name": "meta.block.method.body.ahk2",
                  "patterns": [
                    {
                      "include": "#variable_this"
                    },
                    {
                      "include": "#line_continue"
                    },
                    {
                      "include": "$base"
                    }
                  ]
                },
                {
                  "include": "#comments"
                }
              ]
            },
            {
              "begin": "(?<=^\\s*(?i:static\\s+)?)\\w+\\b(?=(\\[|\\s*\\{?(\\s;.*)?\\n))",
              "beginCaptures": {
                "0": {
                  "patterns": [
                    {
                      "match": "\\b(?i:__item)\\b",
                      "name": "storage.type.metafunction.ahk2"
                    }
                  ],
                  "name": "variable.other.property.ahk2"
                }
              },
              "name": "meta.block.property.ahk2",
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.block.property.end.ahk2"
                }
              },
              "patterns": [
                {
                  "begin": "\\G\\[",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.parameters.begin.ahk2"
                    }
                  },
                  "end": "\\]",
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.definition.parameters.end.ahk2"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#paramters"
                    }
                  ]
                },
                {
                  "include": "#comments"
                },
                {
                  "begin": "{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.property.begin.ahk2"
                    }
                  },
                  "end": "(?=})",
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.property.end.ahk2"
                    }
                  },
                  "name": "meta.block.property.body.ahk2",
                  "patterns": [
                    {
                      "begin": "(?<=^\\s*)(?i:set)\\b",
                      "beginCaptures": {
                        "0": {
                          "name": "storage.type.setter.ahk2"
                        }
                      },
                      "end": "(?<=^\\s*)(})|\\n",
                      "endCaptures": {
                        "1": {
                          "name": "punctuation.definition.block.property.setter.end.ahk2"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#comments"
                        },
                        {
                          "begin": "{",
                          "beginCaptures": {
                            "0": {
                              "name": "punctuation.definition.block.property.setter.begin.ahk2"
                            }
                          },
                          "name": "meta.block.property.setter.body.ahk2",
                          "end": "(?=})",
                          "patterns": [
                            {
                              "include": "#variable_value"
                            },
                            {
                              "include": "$base"
                            }
                          ]
                        },
                        {
                          "begin": "=>",
                          "beginCaptures": {
                            "0": {
                              "name": "storage.type.function.arrow.ahk2"
                            }
                          },
                          "name": "meta.block.property.setter.body.ahk2",
                          "end": "(?=\\n)",
                          "patterns": [
                            {
                              "include": "#variable_value"
                            },
                            {
                              "include": "#line_continue"
                            },
                            {
                              "include": "$base"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "begin": "(?<=^\\s*)(?i:get)\\b",
                      "beginCaptures": {
                        "0": {
                          "name": "storage.type.getter.ahk2"
                        }
                      },
                      "end": "(?<=^\\s*)(})|\\n",
                      "endCaptures": {
                        "1": {
                          "name": "punctuation.definition.block.property.getter.end.ahk2"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#comments"
                        },
                        {
                          "begin": "{",
                          "beginCaptures": {
                            "0": {
                              "name": "punctuation.definition.block.property.getter.begin.ahk2"
                            }
                          },
                          "name": "meta.block.property.getter.body.ahk2",
                          "end": "(?=})",
                          "patterns": [
                            {
                              "include": "#variable_this"
                            },
                            {
                              "include": "$base"
                            }
                          ]
                        },
                        {
                          "begin": "=>",
                          "beginCaptures": {
                            "0": {
                              "name": "storage.type.function.arrow.ahk2"
                            }
                          },
                          "name": "meta.block.property.getter.body.ahk2",
                          "end": "(?=\\n)",
                          "patterns": [
                            {
                              "include": "#variable_this"
                            },
                            {
                              "include": "#line_continue"
                            },
                            {
                              "include": "$base"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "include": "$base"
                    }
                  ]
                }
              ]
            },
            {
              "include": "#variable_this"
            },
            {
              "include": "#class_block"
            },
            {
              "include": "#line_continue"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.ahk2",
          "begin": "^\\s*(\\/\\*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.ahk2"
            }
          },
          "end": "(\\*\\/)\\s*$",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.ahk2"
            }
          }
        },
        {
          "name": "comment.line.ahk2",
          "match": "(?<=(^\\s*|\\s))(;.*)"
        }
      ]
    },
    "compiler_directive": {
      "patterns": [
        {
          "name": "comment.block.ahk2",
          "begin": "^\\s*(\\/\\*)((?i:ahk2exe-keep))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.ahk2"
            },
            "2": {
              "name": "keyword.control.directive.conditional.ahk2"
            }
          },
          "end": "^\\s*(\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.ahk2"
            }
          }
        },
        {
          "match": "^\\s*;@(?i:ahk2exe-ignore(begin|end))",
          "name": "keyword.control.directive.ahk2"
        },
        {
          "begin": "^\\s*(;@(?i:ahk2exe-let))\\s",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.directive.ahk2"
            }
          },
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "match": "\\b([_[:alpha:]][_[:alnum:]]*)(?=\\s*=)",
              "name": "constant.language.ahk2"
            },
            {
              "match": "=",
              "name": "keyword.operator.assignment.ahk2"
            },
            {
              "match": ",",
              "name": "punctuation.separator.comma.ahk2"
            }
          ]
        },
        {
          "match": "^\\s*;@(?i:ahk2exe-\\w+)\\b(\\s.*)?",
          "name": "keyword.control.directive.ahk2",
          "captures": {
            "1": {
              "name": "string.raw.ahk2"
            }
          }
        }
      ]
    },
    "conditional_context": {
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "continuation_section": {
      "name": "meta.parens.continuation_section.ahk2",
      "begin": "^\\s*(\\()([^)]*)$",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.parens.begin.ahk2"
        }
      },
      "end": "^\\s*(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#continuation_section_innards"
        }
      ]
    },
    "continuation_section_innards": {
      "patterns": [
        {
          "name": "string.in_closed_cycle.ahk2",
          "begin": "('|\")",
          "beingCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.ahk2"
            }
          },
          "end": "(\\1)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#string_escaped_char"
            }
          ]
        },
        {
          "include": "#variables"
        },
        {
          "match": "{",
          "name": "punctuation.section.block.begin.ahk2"
        },
        {
          "match": "}",
          "name": "punctuation.section.block.end.ahk2"
        },
        {
          "match": "\\[",
          "name": "punctuation.section.parens.begin.ahk2"
        },
        {
          "match": "\\]",
          "name": "punctuation.section.parens.end.ahk2"
        },
        {
          "include": "#continuation_section"
        },
        {
          "include": "$base"
        }
      ]
    },
    "default_classes": {
      "patterns": [
        {
          "begin": "(?<!\\.)\\b(?i:Gui)\\b",
          "beginCaptures": {
            "0": {
              "name": "support.class.ahk2"
            }
          },
          "end": "(?=([^\\s.;]|\\.[^\\w]))",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "match": "(\\.)(?i)(ActiveX|Button|CheckBox|ComboBox|Control|Custom|DateTime|DDL|Edit|GroupBox|Hotkey|Link|List|ListBox|ListView|MonthCal|Pic|Progress|Radio|Slider|StatusBar|Tab|Text|TreeView|UpDown)\\b",
              "captures": {
                "1": {
                  "name": "punctuation.accessor.ahk2"
                },
                "2": {
                  "name": "support.class.guicontrol.ahk2"
                }
              }
            },
            {
              "match": "\\.",
              "name": "punctuation.accessor.ahk2"
            }
          ]
        },
        {
          "name": "support.class.ahk2",
          "match": "(?<!\\.)\\b(?i:Any|Array|BoundFunc|Buffer|Class|ClipboardAll|Closure|ComObjArray|ComObject|ComValue|ComValueRef|Enumerator|Error|File|Float|Func|Gui|IndexError|InputHook|Integer|KeyError|Map|MemberError|MemoryError|Menu|MenuBar|MethodError|Number|Object|OSError|Primitive|PropertyError|RegExMatchInfo|String|TargetError|TimeoutError|TypeError|ValueError|VarRef|ZeroDivisionError)\\b"
        }
      ]
    },
    "default_statement": {
      "name": "meta.conditional.case.ahk2",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)default(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "2": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "3": {
          "name": "comment.block.ahk2"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "5": {
          "name": "keyword.control.default.ahk2"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.default.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#conditional_context"
        }
      ]
    },
    "function_call": {
      "match": "([_[:alpha:]][[:alnum:]_]*+)(?=\\()",
      "captures": {
        "1": {
          "name": "entity.name.function.ahk2",
          "patterns": [
            {
              "match": "(?<=\\.).+",
              "name": "entity.name.function.method.ahk2"
            },
            {
              "include": "#default_classes"
            },
            {
              "include": "#function_defaultLibrary"
            }
          ]
        }
      }
    },
    "function_call_notparens": {
      "patterns": [
        {
          "match": "(?<=^\\s*(\\{\\s*)?|::\\s*|(?i:(try|else|finally)\\s+))([[:alpha:]_][[:alnum:]_]*\\b(?<!^\\s*(?i:class)\\b))(?=$|\\s((?!(\\s*[+\\-*/^&:.|]?=|<<=|>>=|\\?|\\{))|$))",
          "name": "entity.name.function.ahk2",
          "captures": {
            "0": {
              "patterns": [
                {
                  "include": "#function_defaultLibrary"
                }
              ]
            }
          }
        },
        {
          "match": "(?<=(^\\s*(\\{\\s*)?|::\\s*|(?i:(try|else|finally)\\s+))([[:alpha:]_][[:alnum:]_]*\\.)+)([[:alpha:]_][[:alnum:]_]*\\b)(?=$|\\s((?!(\\s*[+\\-*/^&:.|]?=|<<=|>>=|\\?|\\{))|$))",
          "name": "entity.name.function.method.ahk2"
        }
      ]
    },
    "function_defaultLibrary": {
      "patterns": [
        {
          "match": "(?<!\\.)\\b(?i:Abs|ACos|ASin|ATan|BlockInput|CallbackCreate|CallbackFree|CaretGetPos|Ceil|Chr|Click|ClipWait|ComCall|ComObjActive|ComObjConnect|ComObjFlags|ComObjFromPtr|ComObjGet|ComObjQuery|ComObjType|ComObjValue|ControlAddItem|ControlChooseIndex|ControlChooseString|ControlClick|ControlDeleteItem|ControlFindItem|ControlFocus|ControlGetChecked|ControlGetChoice|ControlGetClassNN|ControlGetEnabled|ControlGetExStyle|ControlGetFocus|ControlGetHwnd|ControlGetIndex|ControlGetItems|ControlGetPos|ControlGetStyle|ControlGetText|ControlGetVisible|ControlHide|ControlHideDropDown|ControlMove|ControlSend|ControlSendText|ControlSetChecked|ControlSetEnabled|ControlSetExStyle|ControlSetStyle|ControlSetText|ControlShow|ControlShowDropDown|CoordMode|Cos|Critical|DateAdd|DateDiff|DetectHiddenText|DetectHiddenWindows|DirCopy|DirCreate|DirDelete|DirExist|DirMove|DirSelect|DllCall|Download|DriveEject|DriveGetCapacity|DriveGetFilesystem|DriveGetLabel|DriveGetList|DriveGetSerial|DriveGetSpaceFree|DriveGetStatus|DriveGetStatusCD|DriveGetType|DriveLock|DriveRetract|DriveSetLabel|DriveUnlock|Edit|EditGetCurrentCol|EditGetCurrentLine|EditGetLine|EditGetLineCount|EditGetSelectedText|EditPaste|EnvGet|EnvSet|Exit|ExitApp|Exp|FileAppend|FileCopy|FileCreateShortcut|FileDelete|FileEncoding|FileExist|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileOpen|FileRead|FileRecycle|FileRecycleEmpty|FileSelect|FileSetAttrib|FileSetTime|Floor|Format|FormatTime|GetKeyName|GetKeySC|GetKeyState|GetKeyVK|GetMethod|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|GuiCtrlFromHwnd|GuiFromHwnd|HasBase|HasMethod|HasProp|HotIf|HotIfWinActive|HotIfWinExist|HotIfWinNotActive|HotIfWinNotExist|Hotkey|Hotstring|IL_Add|IL_Create|IL_Destroy|ImageSearch|IniDelete|IniRead|IniWrite|InputBox|InstallKeybdHook|InstallMouseHook|InStr|IsAlnum|IsAlpha|IsDigit|IsFloat|IsInteger|IsLabel|IsLower|IsNumber|IsObject|IsSetRef|IsSet|IsSpace|IsTime|IsUpper|IsXDigit|KeyHistory|KeyWait|ListHotkeys|ListLines|ListVars|ListViewGetContent|Ln|LoadPicture|Log|LTrim|Max|MenuFromHandle|MenuSelect|Min|Mod|MonitorGet|MonitorGetCount|MonitorGetName|MonitorGetPrimary|MonitorGetWorkArea|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|NumGet|NumPut|ObjAddRef|ObjBindMethod|ObjFromPtr|ObjFromPtrAddRef|ObjGetBase|ObjGetCapacity|ObjHasOwnProp|ObjOwnPropCount|ObjOwnProps|ObjPtr|ObjPtrAddRef|ObjRelease|ObjSetBase|ObjSetCapacity|OnClipboardChange|OnError|OnExit|OnMessage|Ord|OutputDebug|Pause|Persistent|PixelGetColor|PixelSearch|PostMessage|ProcessClose|ProcessExist|ProcessSetPriority|ProcessWait|ProcessWaitClose|Random|RegDelete|RegDeleteKey|RegExMatch|RegExReplace|RegRead|RegWrite|Reload|Round|RTrim|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendLevel|SendMessage|SendMode|SendPlay|SendText|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapsLockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sin|Sleep|Sort|SoundBeep|SoundGetInterface|SoundGetMute|SoundGetName|SoundGetVolume|SoundPlay|SoundSetMute|SoundSetVolume|SplitPath|Sqrt|StatusBarGetText|StatusBarWait|StrCompare|StrGet|StrLen|StrLower|StrPtr|StrPut|StrReplace|StrSplit|StrTitle|StrUpper|SubStr|Suspend|SysGet|SysGetIPAddresses|Tan|Thread|ToolTip|TraySetIcon|TrayTip|Trim|Type|VarSetStrCapacity|VerCompare|WinActivate|WinActivateBottom|WinActive|WinClose|WinExist|WinGetClass|WinGetClientPos|WinGetControls|WinGetControlsHwnd|WinGetCount|WinGetExStyle|WinGetID|WinGetIDLast|WinGetList|WinGetMinMax|WinGetPID|WinGetPos|WinGetProcessName|WinGetProcessPath|WinGetStyle|WinGetText|WinGetTitle|WinGetTransColor|WinGetTransparent|WinHide|WinKill|WinMaximize|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinMoveBottom|WinMoveTop|WinRedraw|WinRestore|WinSetAlwaysOnTop|WinSetEnabled|WinSetExStyle|WinSetRegion|WinSetStyle|WinSetTitle|WinSetTransColor|WinSetTransparent|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b",
          "name": "support.function.ahk2"
        }
      ]
    },
    "hotkey_hotstring": {
      "patterns": [
        {
          "begin": "^\\s*(:(?i:\\s|\\*|\\?0?|c[01]?|[pk]\\d+|s[ipe]|[brto]0?|x|z)*:(?<!^\\s*:[^xX]*:)[\\x09\\x20-\\x7E]+?)(::)",
          "beginCaptures": {
            "1": {
              "name": "keyword.keys.ahk2"
            },
            "3": {
              "name": "punctuation.definition.colon"
            }
          },
          "end": "(?<=^\\s*)(})|\\n",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.block.hotstring.end.ahk2"
            }
          },
          "name": "meta.block.hotstring.ahk2",
          "patterns": [
            {
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.hotstring.begin.ahk2"
                }
              },
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#variable_thishotkey"
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "begin": "(?<=::\\s*)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#variable_thishotkey"
                },
                {
                  "include": "#line_continue"
                },
                {
                  "include": "$base"
                }
              ]
            }
          ]
        },
        {
          "match": "^\\s*(:(?i:\\s|\\*|\\?0?|c[01]?|[pk]\\d+|s[ipe]|[brto]0?|x|z)*:[\\x09\\x20-\\x7E]+?)(::)\\s*((?:\\{\\s*)|(.*?))(\\s;.*)?$",
          "captures": {
            "1": {
              "name": "keyword.keys.ahk2"
            },
            "3": {
              "name": "punctuation.definition.colon"
            },
            "4": {
              "name": "string.raw.ahk2"
            },
            "5": {
              "name": "comment.inline.ahk2"
            }
          },
          "name": "hotstringline.ahk2"
        },
        {
          "begin": "^\\s*(?i:\\$?[~*]{0,2}((([<>]?[!+#^]){0,4}(`;|[\\x21-\\x3A\\x3C-\\x7E]|[a-z][a-z\\d_]+))|(`;|[\\x21-\\x3A\\x3C-\\x7E]|[a-z][a-z\\d_]+)\\s+&\\s+(`;|[\\x21-\\x3A\\x3C-\\x7E]|[a-z][a-z\\d_]+))(\\s+up)?)(::)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.hotkey.ahk2",
              "patterns": [
                {
                  "match": "(?:\\s)&(?=\\s+\\S+(?i:\\s+up)?$)",
                  "name": "keyword.operator.ahk2"
                },
                {
                  "match": "(?<=(\\W|^))[*~]{0,2}([<>]?[\\^!+#]){0,4}(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheelleft|wheelright|xbutton1|xbutton2|joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpadhome|numpadend|numpadpgdn|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+|`;|[\\x21-\\x3A\\x3C-\\x7E])(?=(\\s|$))",
                  "name": "keyword.keys.ahk2"
                }
              ]
            },
            "8": {
              "name": "punctuation.definition.colon"
            }
          },
          "end": "(?<=^\\s*)(})|(?<=::(;|\\s*[^;\\s])[^\\n]*)\\n|(?<=[\\w})\\]]\\s*)\\n",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.block.hotkey.end.ahk2"
            }
          },
          "name": "meta.hotkeyline.ahk2",
          "patterns": [
            {
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.hotkey.begin.ahk2"
                }
              },
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#variable_thishotkey"
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "match": "(?<=\\G\\s*)(([<>]?[!+#^]){0,4}(`{|`?;|[\\x21-\\x7A\\x7C-\\x7E]|(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheelleft|wheelright|xbutton1|xbutton2|joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpadhome|numpadend|numpadpgdn|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+))(?=(\\s+(;.*)?)?\\n))",
              "name": "keyword.keys.ahk2"
            },
            {
              "begin": "(?<=\\G\\s*)(?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#variable_thishotkey"
                },
                {
                  "include": "#line_continue"
                },
                {
                  "include": "$base"
                }
              ]
            }
          ]
        },
        {
          "match": "^\\s*\\w+(:)(?=\\s*(\\s;.*)?$)",
          "name": "entity.name.label.ahk2",
          "captures": {
            "1": {
              "name": "punctuation.definition.colon"
            }
          }
        }
      ]
    },
    "keylist": {
      "match": "(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|wheelleft|wheelright|xbutton1|xbutton2|joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpadhome|numpadend|numpadpgdn|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+))",
      "name": "keyword.keys.ahk2"
    },
    "line_continue": {
      "begin": "([*/<>?:=.]+|[+\\-]=?|!==?|,|\\b(?i:(and|contain|not|in|is|or)))\\s*(\\s;.*)?\\n",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#operators"
            },
            {
              "match": ",",
              "name": "punctuation.separator.comma.ahk2"
            }
          ]
        },
        "3": {
          "name": "comment.inline.ahk2"
        }
      },
      "end": "(?!([*/<>?:=.]+|[+\\-]=?|!==?|,|\\b(?i:(and|contain|not|in|is|or))))\\s*(\\s;.*)?(?=\\n)|(?<=^\\s*(?i:class|static|if|try|loop|while)\\s+\\w+)",
      "endCaptures": {
        "3": {
          "name": "comment.inline.ahk2"
        }
      },
      "patterns": [
        {
          "match": "(?<=^\\s*)\\w+(?=(\\n|\\s))",
          "captures": {
            "0": {
              "patterns": [
                {
                  "include": "#variables"
                }
              ]
            }
          }
        },
        {
          "include": "#line_continue"
        },
        {
          "include": "$base"
        }
      ]
    },
    "numbers": {
      "match": "(?<!\\w\\.?)\\.?\\d(?:(?:[\\w\\.])|(?<=[eE])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "patterns": [
                {
                  "match": "((0[xX][\\da-fA-F]+)|((\\d+(\\.\\d*)?|\\.\\d+)([eE][+\\-]?\\d+)?))$",
                  "name": "constant.numeric.ahk2"
                },
                {
                  "match": "(?:(?:[\\w\\.])|(?<=[eE])[+-])+",
                  "name": "invalid.illegal.constant.numeric"
                }
              ]
            }
          ]
        }
      }
    },
    "object_property": {
      "patterns": [
        {
          "match": "(?<=[,{]\\s*)(\\w+)\\s*(:)",
          "captures": {
            "1": {
              "name": "variable.other.property.ahk2"
            },
            "2": {
              "name": "punctuation.separator.key-value.ahk2"
            }
          },
          "name": "meta.objectliteral.ahk2"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(?<!\\.)\\b(?i:and|or|not|in|is|contains)\\b(?!\\s*:)",
          "name": "keyword.operator.expression.ahk2"
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.ahk2"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.ahk2"
        },
        {
          "match": "=>",
          "name": "storage.type.function.arrow.ahk2"
        },
        {
          "match": "\\.=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.ahk2"
        },
        {
          "match": "&=|\\^=|<<=|>>>=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.ahk2"
        },
        {
          "match": "<<|>>>|>>",
          "name": "keyword.operator.bitwise.shift.ahk2"
        },
        {
          "match": "!=|<=|>=|=?=|<|>",
          "name": "keyword.operator.comparison.ahk2"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.ahk2"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.ahk2"
        },
        {
          "match": ":=",
          "name": "keyword.operator.assignment.ahk2"
        },
        {
          "match": "\\.(?=\\w)",
          "name": "punctuation.accessor.ahk2"
        },
        {
          "match": "\\*|/|-|\\+|\\.",
          "name": "keyword.operator.ahk2"
        },
        {
          "match": "%",
          "name": "punctuation.parens.percent.ahk2"
        },
        {
          "match": "\\[",
          "name": "punctuation.square.begin.ahk2"
        },
        {
          "match": "\\]",
          "name": "punctuation.square.end.ahk2"
        },
        {
          "match": "[?:]",
          "name": "keyword.operator.ternary.ahk2"
        }
      ]
    },
    "paramters": {
      "patterns": [
        {
          "match": "(?<=(?:^|[,(\\[])\\s*)(&?)\\s*(\\w+)\\s*((:=)|(\\*))?\\s*",
          "captures": {
            "1": {
              "name": "keyword.operator.ahk2"
            },
            "2": {
              "name": "variable.paramter.ahk2"
            },
            "4": {
              "name": "keyword.operator.assignment.ahk2"
            },
            "5": {
              "name": "keyword.operator.ahk2"
            }
          },
          "name": "meta.definition.variable.name"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        }
      ]
    },
    "parens": {
      "name": "meta.parens.ahk2",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.ahk2"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.ahk2"
        }
      },
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "$base"
        }
      ]
    },
    "pre_definition": {
      "patterns": [
        {
          "begin": "^\\s*((#)(?i:include(?i:again)?))\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          },
          "end": "(?=(?:;))|(?=\\n)",
          "name": "meta.preprocessor.include.ahk2",
          "patterns": [
            {
              "begin": "['\"]",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.ahk2"
                }
              },
              "end": "\\0",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.ahk2"
                }
              },
              "name": "string.quoted.include.ahk2"
            },
            {
              "begin": "<",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.ahk2"
                }
              },
              "end": ">",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.ahk2"
                }
              },
              "name": "string.quoted.other.lt-gt.include.ahk2"
            },
            {
              "begin": "[^\\s;]",
              "end": "(?=(?:\\s+;))|(?=\\n)",
              "name": "string.raw.include.ahk2"
            },
            {
              "match": "(?:\\s+);.*",
              "name": "comment.line.ahk2"
            }
          ]
        },
        {
          "begin": "^\\s*((#)(?i:dllload|requires|errorstdout|definedefault(array|map|object)value|windowclass(gui|main)))\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          },
          "end": "(?=(?:;))|(?=\\n)",
          "name": "meta.preprocessor.ahk2",
          "patterns": [
            {
              "begin": "[^\\s;]",
              "end": "(?=(?:\\s+;))|(?=\\n)",
              "name": "string.quoted.ahk2"
            },
            {
              "match": "(?:\\s+);.*",
              "name": "comment.line.ahk2"
            }
          ]
        },
        {
          "begin": "^\\s*((#)(?i:hotstring))\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          },
          "end": "(?=(?:;))|(?=\\n)",
          "name": "meta.preprocessor.ahk2",
          "patterns": [
            {
              "begin": "[^\\s;]",
              "end": "(?=(?:\\s+;))|(?=\\n)",
              "name": "string.quoted.ahk2"
            }
          ]
        },
        {
          "match": "^\\s*((#)(?i:clipboardtimeout|criticalobject(sleeptime|timeout)|hotif|hotiftimeout|inputlevel|maxthreads|maxthreadsbuffer|maxthreadsperhotkey|notrayicon|singleinstance|suspendexempt|usehook|warn|warncontinuableexception|winactivateforce))\\b",
          "captures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            }
          }
        },
        {
          "begin": "^\\s*((#)(?i:dllimport))(\\s+(\\w+)\\s*(,?))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.ahk2"
            },
            "2": {
              "name": "punctuation.definition.directive.ahk2"
            },
            "4": {
              "name": "entity.name.function.ahk2"
            },
            "5": {
              "name": "punctuation.separator.comma.ahk2"
            }
          },
          "end": "(?=(?:;))|(?=\\n)",
          "name": "meta.preprocessor.ahk2",
          "patterns": [
            {
              "match": ",",
              "name": "punctuation.separator.comma.ahk2"
            },
            {
              "match": "[^,\\n\\r]+",
              "name": "string.quoted.ahk2"
            }
          ]
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?i)`[abefnprstv'\"`]",
          "name": "constant.character.escape.ahk2"
        },
        {
          "match": "`.",
          "name": "invalid.illegal.unknown-escape.ahk2"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "(['\"])(?=.*\\1)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.ahk2"
            }
          },
          "end": "(\\1)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ahk2"
            }
          },
          "name": "string.quoted.ahk2",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#comments"
            }
          ]
        },
        {
          "begin": "(['\"])(?!.*\\1)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.ahk2"
            }
          },
          "end": "(\\1)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ahk2"
            }
          },
          "name": "string.quoted.brack",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "begin": "^\\s*(\\()",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.section.parens.begin.bracket.round.ahk2"
                }
              },
              "end": "^\\s*(\\))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.parens.end.bracket.round.ahk2"
                }
              },
              "name": "string.continuation",
              "patterns": [
                {
                  "include": "#string_escaped_char"
                }
              ]
            },
            {
              "include": "#string_escaped_char"
            }
          ]
        }
      ]
    },
    "switch_conditional_parentheses": {
      "name": "meta.conditional.switch.ahk2",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "2": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "3": {
          "name": "comment.block.ahk2"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "5": {
          "name": "punctuation.section.parens.begin.bracket.round.conditional.switch.ahk2"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end.bracket.round.conditional.switch.ahk2"
        }
      },
      "patterns": [
        {
          "include": "#conditional_context"
        }
      ]
    },
    "switch_statement": {
      "name": "meta.block.switch.ahk2",
      "begin": "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)switch(?!\\w)))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.switch.ahk2"
        },
        "2": {
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        "3": {
          "name": "comment.block.ahk2 punctuation.definition.comment.begin.ahk2"
        },
        "4": {
          "name": "comment.block.ahk2"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.ahk2 punctuation.definition.comment.end.ahk2"
            },
            {
              "match": "\\*",
              "name": "comment.block.ahk2"
            }
          ]
        },
        "6": {
          "name": "keyword.control.ahk2"
        }
      },
      "end": "(?:(?<=\\})|(?=[>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.switch.ahk2",
          "begin": "\\G ?",
          "end": "((?:\\{))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.switch.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#switch_conditional_parentheses"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.body.switch.ahk2",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.switch.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#default_statement"
            },
            {
              "include": "#case_statement"
            },
            {
              "include": "$self"
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "name": "meta.tail.switch.ahk2",
          "begin": "(?<=\\})[\\s\\n]*",
          "end": "[\\s\\n]*",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "variables": {
      "match": "(?<!\\.)\\b\\w+\\b(?!\\()",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#object_property"
            },
            {
              "match": "\\b(?i:true|false)\\b",
              "name": "constant.language.true.ahk2"
            },
            {
              "match": "\\b(?i:A_AhkPath|A_AhkVersion|A_AllowMainWindow|A_AppData|A_AppDataCommon|A_Args|A_Clipboard|A_ComputerName|A_ComSpec|A_ControlDelay|A_CoordModeCaret|A_CoordModeMenu|A_CoordModeMouse|A_CoordModePixel|A_CoordModeToolTip|A_Cursor|A_DD|A_DDD|A_DDDD|A_DefaultMouseSpeed|A_Desktop|A_DesktopCommon|A_DetectHiddenText|A_DetectHiddenWindows|A_EndChar|A_EventInfo|A_FileEncoding|A_HotkeyInterval|A_HotkeyModifierTimeout|A_Hour|A_IconFile|A_IconHidden|A_IconNumber|A_IconTip|A_Index|A_InitialWorkingDir|A_Is64bitOS|A_IsAdmin|A_IsCompiled|A_IsCritical|A_IsPaused|A_IsSuspended|A_KeyDelay|A_KeyDelayPlay|A_KeyDuration|A_KeyDurationPlay|A_Language|A_LastError|A_LineFile|A_LineNumber|A_ListLines|A_LoopField|A_LoopFileAttrib|A_LoopFileDir|A_LoopFileExt|A_LoopFileFullPath|A_LoopFileName|A_LoopFilePath|A_LoopFileShortName|A_LoopFileShortPath|A_LoopFileSize|A_LoopFileSizeKB|A_LoopFileSizeMB|A_LoopFileTimeAccessed|A_LoopFileTimeCreated|A_LoopFileTimeModified|A_LoopReadLine|A_LoopRegKey|A_LoopRegName|A_LoopRegTimeModified|A_LoopRegType|A_MaxHotkeysPerInterval|A_MDay|A_MenuMaskKey|A_Min|A_MM|A_MMM|A_MMMM|A_Mon|A_MouseDelay|A_MouseDelayPlay|A_MSec|A_MyDocuments|A_Now|A_NowUTC|A_OSVersion|A_PriorHotkey|A_PriorKey|A_ProgramFiles|A_Programs|A_ProgramsCommon|A_PtrSize|A_RegView|A_ScreenDPI|A_ScreenHeight|A_ScreenWidth|A_ScriptDir|A_ScriptFullPath|A_ScriptHwnd|A_ScriptName|A_Sec|A_SendLevel|A_SendMode|A_Space|A_StartMenu|A_StartMenuCommon|A_Startup|A_StartupCommon|A_StoreCapsLockMode|A_Tab|A_Temp|A_ThisFunc|A_ThisHotkey|A_TickCount|A_TimeIdle|A_TimeIdleKeyboard|A_TimeIdleMouse|A_TimeIdlePhysical|A_TimeSincePriorHotkey|A_TimeSinceThisHotkey|A_TitleMatchMode|A_TitleMatchModeSpeed|A_TrayMenu|A_UserName|A_WDay|A_WinDelay|A_WinDir|A_WorkingDir|A_YDay|A_Year|A_YWeek|A_YYYY)\\b",
              "name": "variable.language.ahk2"
            },
            {
              "match": "\\b(?i:A_PriorLine|A_WorkFileName)\\b",
              "name": "variable.language.compiler.ahk2"
            },
            {
              "match": "\\b(?i:A_AhkDir|A_DllDir|A_DllPath|A_GlobalStruct|A_IsDll|A_MainThreadID|A_MemoryModule|A_ModuleHandle|A_ScriptStruct|A_ThreadID|A_ZipCompressionLevel)\\b",
              "name": "variable.language.ahkh.ahk2"
            },
            {
              "include": "#default_classes"
            },
            {
              "include": "#function_defaultLibrary"
            }
          ]
        }
      },
      "name": "variable.other.ahk2"
    },
    "variable_this": {
      "patterns": [
        {
          "include": "#object_property"
        },
        {
          "match": "\\b(?<!\\.)(?i:this|super)\\b",
          "name": "variable.language.this.ahk2"
        },
        {
          "name": "meta.parens.continuation_section.class_innards.ahk2",
          "begin": "^\\s*(\\()([^)]*)$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.parens.begin.ahk2"
            }
          },
          "end": "^\\s*(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#object_property"
            },
            {
              "match": "\\b(?<!\\.)(?i:this|super)\\b",
              "name": "variable.language.this.ahk2"
            },
            {
              "include": "#variable_this"
            },
            {
              "include": "#continuation_section_innards"
            }
          ]
        },
        {
          "name": "meta.parens.class_innards.ahk2",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#variable_this"
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.ahk2"
            }
          },
          "name": "meta.block.class_innards.ahk2",
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#variable_this"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "variable_value": {
      "patterns": [
        {
          "include": "#object_property"
        },
        {
          "match": "\\b(?<!\\.)(?i:this|super)\\b",
          "name": "variable.language.this.ahk2"
        },
        {
          "match": "\\b(?<!\\.)(?i:value)\\b",
          "name": "variable.language.value.ahk2"
        },
        {
          "name": "meta.parens.continuation_section.setter_innards.ahk2",
          "begin": "^\\s*(\\()([^)]*)$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.parens.begin.ahk2"
            }
          },
          "end": "^\\s*(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#object_property"
            },
            {
              "match": "\\b(?<!\\.)(?i:this|super)\\b",
              "name": "variable.language.this.ahk2"
            },
            {
              "match": "\\b(?<!\\.)(?i:value)\\b",
              "name": "variable.language.value.ahk2"
            },
            {
              "include": "#variable_value"
            },
            {
              "include": "#continuation_section_innards"
            }
          ]
        },
        {
          "name": "meta.parens.setter_innards.ahk2",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#variable_value"
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.ahk2"
            }
          },
          "name": "meta.block.setter_innards.ahk2",
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#variable_value"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "variable_thishotkey": {
      "patterns": [
        {
          "include": "#object_property"
        },
        {
          "match": "\\b(?<!\\.)(?i:thishotkey)\\b",
          "name": "variable.language.thishotkey.ahk2"
        },
        {
          "name": "meta.parens.continuation_section.hotkey_innards.ahk2",
          "begin": "^\\s*(\\()([^)]*)$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.parens.begin.ahk2"
            }
          },
          "end": "^\\s*(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#object_property"
            },
            {
              "match": "\\b(?<!\\.)(?i:thishotkey)\\b",
              "name": "variable.language.thishotkey.ahk2"
            },
            {
              "include": "#variable_thishotkey"
            },
            {
              "include": "#continuation_section_innards"
            }
          ]
        },
        {
          "name": "meta.parens.hotkey_innards.ahk2",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.ahk2"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#variable_thishotkey"
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.ahk2"
            }
          },
          "name": "meta.block.hotkey_innards.ahk2",
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.ahk2"
            }
          },
          "patterns": [
            {
              "include": "#variable_thishotkey"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    }
  }
}