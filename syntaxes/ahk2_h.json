{
	"keywords": [
		{
			"body": "#CriticalObjectSleepTime ",
			"description": "访问CriticalObject时, TryEnterCriticalObject调用之间的睡眠时间. 这会影响CPU负载. 此设置仅影响创建CriticalObject的线程.",
			"prefix": "#CriticalObjectSleepTime"
		},
		{
			"body": "#CriticalObjectTimeOut ",
			"description": "当访问CriticalObject超时时, 将显示错误消息, 并且当前线程将退出.",
			"prefix": "#CriticalObjectTimeOut"
		},
		{
			"body": "#DefineDefaultObjectValue ",
			"description": "定义在object/array/map中找不到属性或项目时将使用的默认值.",
			"prefix": "#DefineDefaultObjectValue"
		},
		{
			"body": "#DllImport ${1:Function_Name}, ${2:DllFile\\Function}${3:[, Type1, Arg1, Type2, Arg2, Cdecl ReturnType]}",
			"description": "为dll或exe函数创建脚本函数.",
			"prefix": "#DllImport"
		},
		{
			"body": "#WarnContinuableException",
			"description": "对于连续的异常, 不显示EXCEPTION_ACCESS_VIOLATION警告消息.",
			"prefix": "#WarnContinuableException"
		},
		{
			"body": "#WindowClassGui ",
			"description": "将Gui窗口类名称从AutoHotkey GUI更改为其他名称.",
			"prefix": "#WindowClassGui"
		},
		{
			"body": "#WindowClassMain ",
			"description": "将主窗口类名称从AutoHotkey更改为其他名称.",
			"prefix": "#WindowClassMain"
		}
	],
	"functions": [
		{
			"body": "ObjDump(obj, [compress, password]",
			"description": "将对象转储到内存或保存到文件以供以后使用.",
			"prefix": "ObjDump"
		},
		{
			"body": "ObjLoad(AddressOrPath, [password])",
			"description": "从内存或文件加载转储的对象.",
			"prefix": "ObjLoad"
		},
		{
			"body": "Cast(DataType, VarOrValue, NewDataType)",
			"description": "将值从一种数据类型转换为另一种数据类型.",
			"prefix": "Cast"
		},
		{
			"body": "DynaCall(Function, ParameterDefinition, Params)",
			"description": "内置函数, 类似于DllCall, 但可用于DllCall结构并使用Object语法.它通常比DllCall更快, 更易于使用, 并且节省了大量的键入和代码.",
			"prefix": "DynaCall"
		},
		{
			"body": "ComObjDll(hModule, CLSID, [IID])",
			"description": "从dll创建一个COM对象.",
			"prefix": "ComObjDll"
		},
		{
			"body": "Progress(ProgressParam1, [SubText, MainText, WinTitle, FontName])",
			"description": "创建或更新包含进度条的窗口.",
			"prefix": "Progress"
		},
		{
			"body": "SplashImage(ImageFile, [Options, SubText, MainText, WinTitle, FontName])",
			"description": "创建或更新包含图像的窗口.",
			"prefix": "SplashImage"
		},
		{
			"body": "SplashTextOn([Width, Height, Title, Text])",
			"description": "创建一个可自定义的文本弹出窗口.",
			"prefix": "SplashTextOn"
		},
		{
			"body": "SplashTextOff",
			"description": "创建一个可自定义的文本弹出窗口.",
			"prefix": "SplashTextOff"
		},
		{
			"body": "MemoryLoadLibrary(PathToDll)",
			"description": "将指定的dll加载到进程中.与LoadLibrary类似, 但是从内存而不是从磁盘加载模块, 并允许多次加载模块.",
			"prefix": "MemoryLoadLibrary"
		},
		{
			"body": "MemoryGetProcAddress(Handle, FuncName)",
			"description": "在先前加载了MemoryLoadLibrary的指定dll中找到函数指针.类似于GetProcAddress.",
			"prefix": "MemoryGetProcAddress"
		},
		{
			"body": "MemoryFreeLibrary(Handle)",
			"description": "Free the specified dll previousle loaded with MemoryLoadLibrary. Similar to FreeLibrary.",
			"prefix": "MemoryFreeLibrary"
		},
		{
			"body": "MemoryFindResource(Handle, Name, Type [, Language])",
			"description": "在先前加载了MemoryLoadLibrary的指定dll中找到资源.类似于FindResource和FindResourceEx.",
			"prefix": "MemoryFindResource"
		},
		{
			"body": "MemorySizeofResource(hResource)",
			"prefix": "MemorySizeofResource"
		},
		{
			"body": "MemoryLoadResource(Handle, hResource)",
			"description": "将资源加载到以前通过MemoryLoadLibrary加载的指定dll中.类似于LoadResource.",
			"prefix": "MemoryLoadResource"
		},
		{
			"body": "MemoryLoadString(Handle, Id [, Language])",
			"description": "Loads a string resource in the specified dll previously loaded with MemoryLoadLibrary. Similar to LoadString.",
			"prefix": "MemoryLoadString"
		},
		{
			"body": "ResourceLoadLibrary(ResName)",
			"description": "将指定的dll从资源加载到进程中.类似于MemoryLoadLibrary.",
			"prefix": "ResourceLoadLibrary"
		},
		{
			"body": "Between(VariableOrValue, LowerBound, UpperBound)",
			"description": "检查变量的内容是数字形式还是字母形式, 介于两个值(包括两个值)之间.",
			"prefix": "Between"
		},
		{
			"body": "EnvUpdate()",
			"description": "通知操作系统和所有正在运行的应用程序环境变量已更改.",
			"prefix": "EnvUpdate"
		},
		{
			"body": "GetVar(VarName [, ResolveAlias])",
			"description": "检索指向变量的低级指针.",
			"prefix": "GetVar"
		},
		{
			"body": "Swap(Var1, Var2)",
			"description": "交换两个变量.",
			"prefix": "Swap"
		},
		{
			"body": "StrBuf(String [, Encoding])",
			"description": "将字符串复制到缓冲区, 可以选择在给定的代码页之间进行转换.",
			"prefix": "StrBuf"
		},
		{
			"body": "Struct(Definition ,StructMemory, InitObject)",
			"description": "Struct是一个内置函数, 用于创建并返回结构对象.该对象可用于使用对象语法访问定义的结构.SetCapacity方法可用于将内存分配给结构和指针.",
			"prefix": "Struct"
		},
		{
			"body": "sizeof(Definition [, offset])",
			"description": "内置函数可以计算结构或类型的大小, 例如TCHAR或PTR或VOID ..., 有关用法和示例, 另请参见Struct.",
			"prefix": "sizeof"
		},
		{
			"body": "ExeThread(Script [, Parameters, Title, Wait])",
			"description": "在不使用AutoHotkey.dll(基于NewThread)的情况下, 在当前进程中创建一个真正的附加AutoHotkey线程.",
			"prefix": "ExeThread"
		},
		{
			"body": "ThreadObj(Script [, Parameters, Title])",
			"description": "在不使用AutoHotkey.dll(基于NewThread)的情况下, 在当前进程中创建一个真正的附加AutoHotkey线程.",
			"prefix": "ThreadObj"
		},
		{
			"body": "NewThread(Script [, Parameters, Title])",
			"description": "使用线程本地存储(不使用AutoHotkey.dll)在当前进程中创建一个真正的其他AutoHotkey线程.",
			"prefix": "NewThread"
		},
		{
			"body": "Alias(VariableOrName, VariableOrPointer)",
			"description": "将局部变量转换为别名以表示另一个变量, 例如在另一个线程中.",
			"prefix": "Alias"
		},
		{
			"body": "CriticalObject([Object, lpCriticalSection])",
			"description": "可包装对象以供多线程使用.可以从多个线程使用此类对象, 而不会导致崩溃.",
			"prefix": "CriticalObject"
		},
		{
			"body": "CryptAES(AddressOrVar, Size, password [, EncryptOrDecrypt, Algorithm])",
			"description": "加密和解密数据.",
			"prefix": "CryptAES"
		},
		{
			"body": "UnZip(BufOrAddOrFile [, Size], DestinationFolder [, FileToExtract, DestinationFileName, Password])",
			"description": "从zip存档中提取一项或所有项.",
			"prefix": "UnZip"
		},
		{
			"body": "UnZipBuffer(BufOrAddOrFile [, Size], FileToExtract [, Password])",
			"description": "从zip存档中提取一项.",
			"prefix": "UnZipBuffer"
		},
		{
			"body": "UnZipRawMemory(AddressOrBufferObject [, Size, Password])",
			"description": "此功能用于解压缩和解密原始内存, 例如从资源中解压缩.",
			"prefix": "UnZipRawMemory"
		},
		{
			"body": "ZipAddBuffer(ZipHandle, AddOrBuf [, Size, FileName])",
			"description": "将内存中的文件添加到使用ZipCreateBuffer或ZipCreateFile创建的zip存档中.",
			"prefix": "ZipAddBuffer"
		},
		{
			"body": "ZipAddFile(ZipHandle, FileName [, ZipFileName])",
			"description": "将文件添加到使用ZipCreateFile或ZipCreateBuffer创建的zip存档中.",
			"prefix": "ZipAddFile"
		},
		{
			"body": "ZipAddFolder(ZipHandle, ZipFileName)",
			"description": "将空文件夹添加到使用ZipCreateFile或ZipCreateBuffer创建的zip存档中.",
			"prefix": "ZipAddFolder"
		},
		{
			"body": "ZipCloseBuffer(ZipHandle)",
			"description": "关闭使用ZipCreateBuffer创建的zip存档, 将其保存到变量中并返回其大小.",
			"prefix": "ZipCloseBuffer"
		},
		{
			"body": "ZipCloseFile(ZipHandle)",
			"description": "关闭使用ZipCreateFile创建的zip存档.",
			"prefix": "ZipCloseFile"
		},
		{
			"body": "ZipCreateBuffer(MaxSize [, Password])",
			"description": "此函数用于在内存中创建一个新的空zip文件, 使用ZipAddBuffer或ZipAddFile将文件添加到zip存档中",
			"prefix": "ZipCreateBuffer"
		},
		{
			"body": "ZipCreateFile(FileName [, Password])",
			"description": "此函数用于创建一个新的空zip文件, 使用ZipAddFile或ZipAddBuffer将文件添加到zip存档中.",
			"prefix": "ZipCreateFile"
		},
		{
			"body": "ZipInfo(FileNameOrAddress [, Size])",
			"description": "返回一个对象, 其中包含有关zip归档文件中所有项目的信息.",
			"prefix": "ZipInfo"
		},
		{
			"body": "ZipOptions(ZipHandle, Options)",
			"description": "更改使用ZipCreateFile创建的zip存档的选项.",
			"prefix": "ZipOptions"
		},
		{
			"body": "ZipRawMemory(AddressOrBufferObject [, Size , Password])",
			"description": "此功能用于压缩和解密原始内存, 例如用于资源.",
			"prefix": "ZipRawMemory"
		}
	],
	"methods": {
		"object": [
			{
				"body": "DefineDefault(${1:[Value]})",
				"description": "为object,map,array定义默认值代替显示错误, 当键/项/属性不存在时.",
				"prefix": "DefineDefault"
			}
		],
		"struct": [
			{
				"body": "CountOf(${1:[field]})",
				"description": "返回数组定义的大小；如果结构或字段不是数组, 则返回0.",
				"prefix": "CountOf"
			},
			{
				"body": "Encoding(${1:[field]})",
				"description": "返回字段的编码.",
				"prefix": "Encoding"
			},
			{
				"body": "GetAddress($1:[field]})",
				"description": "返回字段或结构的地址.",
				"prefix": "GetAddress"
			},
			{
				"body": "GetCapacity(${1:[field]})",
				"prefix": "GetCapacity"
			},
			{
				"body": "GetPointer(${1:[field]})",
				"description": "返回保存在结构或字段中的已分配内存的指针.",
				"prefix": "GetPointer"
			},
			{
				"body": "IsPointer(${1:[field]})",
				"description": "如果字段或结构是指针, 则返回true.",
				"prefix": "IsPointer"
			},
			{
				"body": "Offset(${1:field})",
				"description": "返回字段的偏移量.",
				"prefix": "Offset"
			},
			{
				"body": "SetCapacity(${1:[field,]} newsize)",
				"description": "为一个字段分配内存, 如果分配了新的内存, 则返回分配的大小.",
				"prefix": "SetCapacity"
			},
			{
				"body": "Size(${1:[field]})",
				"description": "返回结构或字段的大小(以字节为单位).",
				"prefix": "Size"
			}
		]
	}
}